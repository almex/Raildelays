<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!-- Needed if we use a AutomaticJobRegistrar -->
    <context:annotation-config/>

    <import resource="parent-job-context.xml"/>

    <batch:job id="mainJob" parent="parentJob">
        <batch:step id="retrieveDataFromRailtime" next="generateExcelFiles">
            <batch:partition partitioner="partitioner">
                <batch:handler task-executor="taskExecutor"/>
                <batch:step>
                    <batch:tasklet transaction-manager="batchTransactionManager">
                        <batch:chunk reader="compositeRailtimeItemReader"
                                     processor="chainedProcessorsForRailtime"
                                     writer="jpaItemWriter"
                                     commit-interval="10" skip-limit="10" retry-limit="3">
                            <batch:retryable-exception-classes>
                                <batch:include class="java.io.IOException"/>
                                <batch:include class="org.springframework.dao.OptimisticLockingFailureException"/>
                            </batch:retryable-exception-classes>
                            <batch:skippable-exception-classes>
                                <batch:include class="org.springframework.batch.item.validator.ValidationException"/>
                            </batch:skippable-exception-classes>
                            <batch:listeners merge="true">
                                <batch:listener ref="logStep1ItemProcessorListener"/>
                            </batch:listeners>
                        </batch:chunk>
                        <batch:transaction-attributes
                                isolation="DEFAULT" propagation="REQUIRED"/>
                    </batch:tasklet>
                    <batch:listeners merge="true">
                        <batch:listener ref="loggerContextStepListener"/>
                    </batch:listeners>
                </batch:step>
            </batch:partition>
        </batch:step>
        <batch:step id="generateExcelFiles">
            <batch:tasklet transaction-manager="batchTransactionManager">
                <batch:chunk reader="delaysItemReader"
                             processor="chainedProcessorsForDelays"
                             writer="compositeItemWriter"
                             commit-interval="1" skip-limit="10">
                    <batch:skippable-exception-classes>
                        <batch:include class="org.springframework.batch.item.validator.ValidationException"/>
                        <batch:include class="be.raildelays.batch.exception.ArrivalDepartureEqualsException"/>
                    </batch:skippable-exception-classes>
                    <batch:listeners merge="true">
                        <batch:listener ref="logSkippedItemListener"/>
                        <batch:listener ref="resourceLocatorListener"/>
                        <batch:listener ref="logStep2ItemProcessorListener"/>
                    </batch:listeners>
                </batch:chunk>
                <batch:transaction-attributes isolation="DEFAULT" propagation="REQUIRED"/>
            </batch:tasklet>
            <batch:next on="COMPLETED_WITH_60M_DELAY" to="handleDelayMoreThanOneHour"/>
            <batch:end on="*"/>
            <batch:listeners merge="true">
                <batch:listener ref="delaysItemReader"/>
                <batch:listener ref="filterTwoSensPerDayXlsProcessor"/>
                <batch:listener ref="storeInContextMoreThanOneHourDelayProcessor"/>
                <batch:listener ref="loggerContextStepListener"/>
                <batch:listener ref="promoteContextListener"/>
                <batch:listener ref="decisionFlowListener"/>
            </batch:listeners>
        </batch:step>
        <batch:step id="handleDelayMoreThanOneHour">
            <batch:tasklet transaction-manager="batchTransactionManager">
                <batch:chunk reader="retrieveLineStopViaContextReader"
                             processor="chainedProcessorsForMoreThanOneHourDelay"
                             writer="emailWriter"
                             commit-interval="1">
                    <batch:listeners merge="true">
                        <batch:listener ref="logSkippedItemListener"/>
                    </batch:listeners>
                </batch:chunk>
            </batch:tasklet>
            <batch:listeners merge="true">
                <batch:listener ref="demoteContextListener"/>
            </batch:listeners>
        </batch:step>
        <batch:listeners merge="true">
            <batch:listener ref="loggerContextJobListener"/>
        </batch:listeners>
    </batch:job>

    <bean id="partitioner"
          class="be.raildelays.batch.reader.TrainIdPartitioner">
        <property name="trainListReader" ref="trainListReader"/>
    </bean>

    <bean id="taskExecutor"
          class="be.raildelays.concurrent.scheduling.MdcThreadPoolTaskExecutor">
        <property name="corePoolSize" value="2"/>
        <property name="maxPoolSize" value="4"/>
        <property name="allowCoreThreadTimeOut" value="true"/>
        <property name="waitForTasksToCompleteOnShutdown" value="true"/>
    </bean>

    <!-- ================================================================================================== -->
    <!-- =====================================        READERS         ===================================== -->
    <!-- ================================================================================================== -->
    <bean id="trainListReader"
          class="org.springframework.batch.item.file.FlatFileItemReader">
        <property name="lineMapper">
            <bean
                    class="org.springframework.batch.item.file.mapping.PassThroughLineMapper">
            </bean>
        </property>
        <property name="encoding" value="ISO-8859-1"/>
        <property name="resource" value="${file.trainlist.uri}"/>
    </bean>

    <bean id="compositeRailtimeItemReader"
          class="be.raildelays.batch.reader.CompositeRailtimeItemReader"
          scope="step">
        <property name="departureReader">
            <bean class="be.raildelays.batch.reader.RailtimeItemReader"
                  scope="step">
                <property name="date" value="#{jobParameters['date']}"/>
                <property name="language" value="#{jobParameters['lang']}"/>
                <property name="trainId" value="#{stepExecutionContext['trainId']}"/>
                <property name="sens">
                    <util:constant static-field="be.raildelays.domain.Sens.DEPARTURE"/>
                </property>
            </bean>
        </property>
        <property name="arrivalReader">
            <bean class="be.raildelays.batch.reader.RailtimeItemReader"
                  scope="step">
                <property name="date" value="#{jobParameters['date']}"/>
                <property name="language" value="#{jobParameters['lang']}"/>
                <property name="trainId" value="#{stepExecutionContext['trainId']}"/>
                <property name="sens">
                    <util:constant static-field="be.raildelays.domain.Sens.ARRIVAL"/>
                </property>
            </bean>
        </property>
    </bean>

    <bean id="delaysItemReader"
          class="be.raildelays.batch.reader.DelaysItemReader"
          scope="step">
        <property name="stationA" value="#{jobParameters['station.a.name']}"/>
        <property name="stationB" value="#{jobParameters['station.b.name']}"/>
        <property name="language" value="#{jobParameters['lang']}"/>
        <property name="date" value="#{jobParameters['date']}"/>
        <property name="threshold" value="${excel.item.delay.min.threshold}"/>
    </bean>

    <bean id="delaysFromDepartureItemReader"
          class="org.springframework.batch.item.data.RepositoryItemReader"
          scope="step">
        <property name="pageSize" value="2"/>
        <property name="methodName" value="findArrivalDelays"/>
        <property name="repository" ref="lineStopDao"/>
        <property name="arguments">
            <list>
                <value>#{jobParameters['date']}</value>
                <value>#{jobParameters['station.a.name']}</value>
                <value>${excel.item.delay.min.threshold}</value>
            </list>
        </property>
        <property name="sort">
            <map>
                <entry key="arrivalTime" value="ASC"/>
            </map>
        </property>
    </bean>

    <bean id="delaysFromArrivalItemReader"
          class="org.springframework.batch.item.data.RepositoryItemReader"
          scope="step">
        <property name="pageSize" value="2"/>
        <property name="methodName" value="findArrivalDelays"/>
        <property name="repository" ref="lineStopDao"/>
        <property name="arguments">
            <list>
                <value>#{jobParameters['date']}</value>
                <value>#{jobParameters['station.b.name']}</value>
                <value>${excel.item.delay.min.threshold}</value>
            </list>
        </property>
        <property name="sort">
            <map>
                <entry key="date" value="ASC"/>
            </map>
        </property>
    </bean>

    <bean id="retrieveLineStopViaContextReader"
          class="be.raildelays.batch.reader.BatchExcelRowInContextReader"
          scope="step">
        <property name="keyName" value="${excel.item.max.key}"/>
    </bean>

    <!-- ================================================================================================== -->
    <!-- =====================================       PROCESSORS       ===================================== -->
    <!-- ================================================================================================== -->

    <bean id="chainedProcessorsForRailtime"
          class="org.springframework.batch.item.support.CompositeItemProcessor">
        <property name="delegates">
            <list>
                <ref bean="lineStopMapperProcessor"/>
                <ref bean="validatorProcessor"/>
            </list>
        </property>
    </bean>

    <bean id="chainedProcessorsForDelays"
          class="org.springframework.batch.item.support.CompositeItemProcessor">
        <property name="delegates">
            <list>
                <ref bean="aggregateExpectedTimeProcessor"/>
                <ref bean="validatorProcessor"/>
                <ref bean="excelRowMapperProcessor"/>
                <ref bean="validatorProcessor"/>
                <ref bean="searchNextTrainProcessor"/>
                <ref bean="validatorProcessor"/>
                <ref bean="filterTwoSensPerDayXlsProcessor"/>
                <ref bean="filterSmallDelaysProcessor"/>
                <ref bean="storeInContextMoreThanOneHourDelayProcessor"/>
            </list>
        </property>
    </bean>

    <bean id="chainedProcessorsForMoreThanOneHourDelay"
          class="org.springframework.batch.item.support.CompositeItemProcessor">
        <property name="delegates">
            <list>
                <ref bean="validatorProcessor"/>
                <ref bean="batchExcelRowToSimpleMailMessageProcessor"/>
            </list>
        </property>
    </bean>

    <bean id="lineStopMapperProcessor"
          class="be.raildelays.batch.processor.LineStopMapperProcessor"
          scope="step">
        <property name="date" value="#{jobParameters[date]}"/>
        <property name="language" value="#{jobParameters['lang']}"/>
    </bean>

    <bean id="aggregateExpectedTimeProcessor"
          class="be.raildelays.batch.processor.AggregateExpectedTimeProcessor">
    </bean>

    <bean id="excelRowMapperProcessor"
          class="be.raildelays.batch.processor.ExcelRowMapperProcessor"
          scope="step">
        <property name="stationA" value="#{jobParameters['station.a.name']}"/>
        <property name="stationB" value="#{jobParameters['station.b.name']}"/>
        <property name="language" value="#{jobParameters['lang']}"/>
    </bean>

    <bean id="searchNextTrainProcessor"
          class="be.raildelays.batch.processor.SearchNextTrainProcessor"
          scope="step">
        <property name="language" value="#{jobParameters['lang']}"/>
    </bean>

    <bean id="validatorProcessor"
          class="org.springframework.batch.item.validator.ValidatingItemProcessor">
        <property name="validator">
            <bean class="org.springframework.batch.item.validator.SpringValidator">
                <property name="validator">
                    <bean class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>
                </property>
            </bean>
        </property>
    </bean>

    <bean id="filterTwoSensPerDayXlsProcessor"
          class="be.raildelays.batch.processor.FilterTwoSensPerDayProcessor"
          scope="step">
        <property name="outputReader">
            <bean class="org.springframework.batch.item.file.MultiResourceAwareItemReader">
                <property name="delegate">
                    <bean class="org.springframework.batch.item.file.ExcelSheetItemReader">
                        <property name="name" value="excelSheetItemReader1"/>
                        <property name="rowsToSkip" value="${excel.sheet0.rowstoskip}"/>
                        <property name="maxItemCount" value="${excel.sheet0.maxitemcount}"/>
                        <property name="rowMapper">
                            <bean class="be.raildelays.batch.reader.BatchExcelRowMapper">
                                <property name="language" value="#{jobParameters['lang']}"/>
                            </bean>
                        </property>
                    </bean>
                </property>
                <property name="resourceLocator" ref="itemReaderResourceLocator"/>
            </bean>
        </property>
    </bean>

    <bean id="filterSmallDelaysProcessor"
          class="be.raildelays.batch.processor.FilterSmallDelaysProcessor">
        <property name="threshold" value="${excel.item.delay.min.threshold}"/>
    </bean>

    <bean id="storeInContextMoreThanOneHourDelayProcessor"
          class="be.raildelays.batch.processor.StoreDelayGreaterThanThresholdInContextProcessor"
          scope="step">
        <property name="threshold" value="${excel.item.delay.max.threshold}"/>
        <property name="keyName" value="${excel.item.max.key}"/>
    </bean>

    <bean id="batchExcelRowToSimpleMailMessageProcessor"
          class="be.raildelays.batch.processor.BatchExcelRowToSimpleMailMessageProcessor"
          scope="step">
        <property name="from" value="#{jobParameters['mail.account.address']}"/>
        <property name="to" value="#{jobParameters['mail.account.address']}"/>
        <property name="subject" value="[SNCB/NMBS] Retard de plus d'une heure"/>
    </bean>

    <!-- ================================================================================================== -->
    <!-- =====================================         WRITERS        ===================================== -->
    <!-- ================================================================================================== -->

    <bean id="compositeItemWriter"
          class="org.springframework.batch.item.support.CompositeItemWriter"
          scope="step">
        <property name="delegates">
            <list>
                <ref bean="flatFileItemWriter"/>
                <ref bean="multiResourceItemWriter"/>
            </list>
        </property>
    </bean>

    <bean id="flatFileItemWriter"
          class="org.springframework.batch.item.file.FlatFileItemWriter"
          scope="step">
        <property name="resource" value="#{jobParameters['output.file.path']}"/>
        <property name="appendAllowed" value="true"/>
        <property name="shouldDeleteIfExists" value="false"/>
        <property name="saveState" value="true"/>
        <property name="lineAggregator">
            <bean class="org.springframework.batch.item.file.transform.PassThroughLineAggregator"/>
        </property>
    </bean>

    <bean id="multiResourceItemWriter"
          class="org.springframework.batch.item.file.MultiResourceSupportItemWriter"
          scope="step">
        <property name="delegate" ref="sortedItemWriter"/>
        <property name="name" value="multiResourceItemWriter"/>
        <property name="resourceLocator" ref="itemWriterResourceLocator"/>
    </bean>

    <bean id="sortedItemWriter"
          class="org.springframework.batch.item.support.SortedItemStreamWriter"
          scope="step">
        <property name="reverseOrder" value="true"/>
        <property name="reader">
            <bean class="org.springframework.batch.item.file.ExcelSheetItemReader">
                <property name="name" value="excelSheetItemReader2"/>
                <property name="rowsToSkip" value="${excel.sheet0.rowstoskip}"/>
                <property name="maxItemCount" value="${excel.sheet0.maxitemcount}"/>
                <property name="rowMapper">
                    <bean class="be.raildelays.batch.reader.BatchExcelRowMapper">
                        <property name="language" value="#{jobParameters['lang']}"/>
                    </bean>
                </property>
            </bean>
        </property>
        <property name="writer" ref="excelSheetItemWriter"/>
    </bean>

    <bean id="excelSheetItemWriter"
          class="org.springframework.batch.item.file.ExcelSheetItemWriter"
          scope="step">
        <property name="rowAggregator">
            <bean class="be.raildelays.batch.writer.BatchExcelRowAggregator"
                  scope="step">
                <property name="language" value="#{jobParameters['lang']}"/>
            </bean>
        </property>
        <property name="name" value="excelSheetItemWriter"/>
        <property name="shouldDeleteIfExists" value="false"/>
        <property name="rowsToSkip" value="${excel.sheet0.rowstoskip}"/>
        <property name="maxItemCount" value="${excel.sheet0.maxitemcount}"/>
        <property name="template" value="file:#{jobParameters['excel.input.template']}"/>
    </bean>

    <bean id="jpaItemWriter"
          class="org.springframework.batch.item.database.JpaItemWriter"
          scope="step">
        <property name="entityManagerFactory" ref="raildelaysEntityManagerFactory"/>
    </bean>

    <bean id="emailWriter"
          class="org.springframework.batch.item.mail.SimpleMailMessageItemWriter"
          scope="step">
        <property name="mailSender">
            <bean class="org.springframework.mail.javamail.JavaMailSenderImpl">
                <property name="host" value="#{jobParameters['mail.server.host']}"/>
                <property name="port" value="#{jobParameters['mail.server.port']}"/>
                <property name="password" value="#{jobParameters['mail.account.password']}"/>
                <property name="username" value="#{jobParameters['mail.account.username']}"/>
            </bean>
        </property>
        <property name="mailErrorHandler">
            <bean class="org.springframework.batch.item.mail.DefaultMailErrorHandler"/>
        </property>
    </bean>

    <!-- ================================================================================================== -->
    <!-- =====================================        LISTENERS       ===================================== -->
    <!-- ================================================================================================== -->

    <bean id="logSkippedItemListener"
          class="be.raildelays.batch.listener.LogSkippedItemListener"
          scope="step"/>

    <bean id="resourceLocatorListener"
          class="be.raildelays.batch.listener.ResourceLocatorListener"
          scope="step"/>

    <bean id="logStep1ItemProcessorListener"
          class="be.raildelays.batch.listener.LogStep1ItemProcessorListener"
          scope="step"/>

    <bean id="logStep2ItemProcessorListener"
          class="be.raildelays.batch.listener.LogStep2ItemProcessorListener"
          scope="step"/>

    <bean id="loggerContextJobListener"
          class="be.raildelays.batch.listener.LoggerContextJobListener"
          scope="job"/>

    <bean id="loggerContextStepListener"
          class="be.raildelays.batch.listener.LoggerContextStepListener"
          scope="step"/>

    <bean id="decisionFlowListener"
          class="be.raildelays.batch.listener.MoreThanOneHourDecisionFlowListener"
          scope="step">
        <property name="keyName" value="${excel.item.max.key}"/>
    </bean>

    <bean id="promoteContextListener"
          class="org.springframework.batch.core.listener.ExecutionContextPromotionListener"
          scope="step">
        <property name="keys">
            <array>
                <value>${excel.item.max.key}</value>
            </array>
        </property>
        <property name="statuses">
            <array>
                <value>COMPLETED_WITH_60M_DELAY</value>
            </array>
        </property>
    </bean>

    <bean id="demoteContextListener"
          class="org.springframework.batch.core.listener.ExecutionContextDemotionListener"
          scope="step">
        <property name="keys">
            <array>
                <value>${excel.item.max.key}</value>
            </array>
        </property>
    </bean>


    <!-- ================================================================================================== -->
    <!-- =====================================        RESOURCES       ===================================== -->
    <!-- ================================================================================================== -->

    <bean id="itemReaderResourceLocator"
          class="be.raildelays.batch.support.ItemReaderResourceLocator"
          scope="step">
        <property name="resource" value="file:#{jobParameters['excel.output.path']}"/>
        <property name="resourceItemSearch" ref="resourceItemSearch"/>
    </bean>

    <bean id="itemWriterResourceLocator"
          class="be.raildelays.batch.support.ItemWriterResourceLocator"
          scope="step">
        <property name="resource" value="file:#{jobParameters['excel.output.path']}"/>
        <property name="resourceItemSearch" ref="resourceItemSearch"/>
    </bean>

    <bean id="resourceItemSearch"
          class="be.raildelays.batch.support.SimpleResourceItemSearch"
          scope="step">
        <property name="reader">
            <bean class="org.springframework.batch.item.file.ExcelSheetItemReader">
                <property name="name" value="excelSheetItemReader3"/>
                <property name="rowsToSkip" value="${excel.sheet0.rowstoskip}"/>
                <property name="maxItemCount" value="${excel.sheet0.maxitemcount}"/>
                <property name="rowMapper">
                    <bean class="be.raildelays.batch.reader.BatchExcelRowMapper">
                        <property name="language" value="#{jobParameters['lang']}"/>
                    </bean>
                </property>
            </bean>
        </property>
        <property name="comparator">
            <bean class="be.raildelays.batch.bean.ExcelRowComparator"/>
        </property>
    </bean>

</beans>
