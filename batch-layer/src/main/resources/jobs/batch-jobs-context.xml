<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	<!-- Needed if w use a AutomaticJobRegistrar -->
	<context:annotation-config />

	<batch:job id="searchDelaysJob" restartable="true">
		<batch:step id="retrieveDataFromRailtime" next="searchDelays">
			<batch:tasklet transaction-manager="batchTransactionManager">
				<batch:chunk reader="compositeRailtimeItemReader"
					writer="raildelaysServiceWriter" commit-interval="1">
				</batch:chunk>
				<batch:transaction-attributes
					isolation="DEFAULT" propagation="REQUIRED" />
			</batch:tasklet>
		</batch:step>
		<batch:step id="searchDelays">
			<batch:tasklet transaction-manager="batchTransactionManager">
				<batch:chunk reader="compositeRaildelaysItemReader" processor="delaysPerDayProcessor" writer="flatFileItemWriter"
					commit-interval="1" skip-limit="100">
					<batch:skippable-exception-classes>
						<batch:include class="java.lang.StringIndexOutOfBoundsException"/>
					</batch:skippable-exception-classes>
				</batch:chunk>
				<batch:transaction-attributes
					isolation="DEFAULT" propagation="REQUIRED" />
			</batch:tasklet>
		</batch:step>
	</batch:job>

	<!-- Readers -->	

	<bean id="compositeRailtimeItemReader" class="be.raildelays.batch.reader.CompositeRailtimeItemReader"
		scope="step">
		<property name="date" value="#{jobParameters[date]}" />
		<property name="resource" value="#{jobParameters['input.file.path']}" />
		<property name="fileReader">	
			<bean class="org.springframework.batch.item.file.FlatFileItemReader"
				scope="step">
				<property name="lineMapper">
					<bean
						class="org.springframework.batch.item.file.mapping.PassThroughLineMapper">
					</bean>
				</property>
<!-- 				<property name="resource" value="dummy" /> -->
			</bean>
		</property>
		<property name="departureReader">
			<bean class="be.raildelays.batch.reader.RailtimeItemReader"
				scope="step">
				<property name="sens">
					<util:constant static-field="be.raildelays.domain.Sens.DEPARTURE" />
				</property>
			</bean>
		</property>
		<property name="arrivalReader">
			<bean class="be.raildelays.batch.reader.RailtimeItemReader"
				scope="step">
				<property name="sens">
					<util:constant static-field="be.raildelays.domain.Sens.ARRIVAL" />
				</property>
			</bean>
		</property>
	</bean>

	<bean id="compositeRaildelaysItemReader"
		class="be.raildelays.batch.reader.CompositeRaildelaysItemReader"
		scope="step">			
		<property name="datesItemReader">
			<bean class="be.raildelays.batch.reader.DatabaseDatesItemReader"
				scope="step">
				<property name="lastDate" value="#{jobParameters[date]}" />
			</bean>
		</property>
		<property name="delaysItemReader">
			<bean class="be.raildelays.batch.reader.DelaysItemReader"
				scope="step">
				<property name="stationA" value="#{jobParameters['station.a.name']}" />
				<property name="stationB" value="#{jobParameters['station.b.name']}" />	
			</bean>
		</property>
	</bean>
	
	<bean id="delaysItemReader" class="be.raildelays.batch.reader.DelaysItemReader"
				scope="step">
		<property name="date" value="#{jobParameters[date]}" />
		<property name="stationA" value="#{jobParameters['station.a.name']}" />
		<property name="stationB" value="#{jobParameters['station.b.name']}" />	
	</bean>
	
	<!-- Processors -->
	
	<bean id="delaysPerDayProcessor" class="be.raildelays.batch.processor.FilterTwoDelaysPerDayProcessor" scope="step">
		<property name="stationA" value="#{jobParameters['station.a.name']}" />
		<property name="stationB" value="#{jobParameters['station.b.name']}" />
	</bean>
    
    <bean id="excelRowMapperProcessor" class="be.raildelays.batch.processor.ExcelRowMapperProcessor" scope="step">
		<property name="stationA" value="#{jobParameters['station.a.name']}" />
		<property name="stationB" value="#{jobParameters['station.b.name']}" />
	</bean>
    
    <bean id="filterTwoSensPerDayProcessor" class="be.raildelays.batch.processor.FilterTwoSensPerDayProcessor" scope="step">
		<property name="stationA" value="#{jobParameters['station.a.name']}" />
		<property name="stationB" value="#{jobParameters['station.b.name']}" />
	</bean>
    
    <bean id="dispatchProcessor" class="be.raildelays.batch.processor.FilterTwoSensPerDayProcessor" scope="step">
		<property name="stationA" value="#{jobParameters['station.a.name']}" />
		<property name="stationB" value="#{jobParameters['station.b.name']}" />
	</bean>
	
	<bean id="validatorProcessor" class="org.springframework.batch.item.validator.ValidatingItemProcessor">
	    <property name="validator">
	    	<bean class="org.springframework.batch.item.validator.SpringValidator">
	    		<property name="validator">
	    			<bean class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />
	    		</property>
	    	</bean>
	    </property>
	</bean>
    
    <bean id="chainedProcessors" class="org.springframework.batch.item.support.CompositeItemProcessor">
        <property name="delegates">
            <list>
                <ref bean="excelRowMapperProcessor" />
                <ref bean="validatorProcessor" />
                <ref bean="filterTwoSensPerDayProcessor" />
                <ref bean="dispatchProcessor" />
            </list>
        </property>
    </bean>

	<!-- Writers -->

	<bean id="raildelaysServiceWriter" class="be.raildelays.batch.writer.RaildelaysServiceWriter"
		scope="step">
	</bean>

	<bean id="flatFileItemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter" scope="step">
		<property name="resource" value="#{jobParameters['output.file.path']}" />
		<property name="appendAllowed" value="false" />
		<property name="shouldDeleteIfExists" value="true" />
		<property name="saveState" value="true" />
		<property name="lineAggregator">
			<bean class="org.springframework.batch.item.file.transform.RecursiveCollectionLineAggregator">
				<property name="delegate">
					<bean class="org.springframework.batch.item.file.transform.PassThroughLineAggregator" />
				</property>
			</bean>
		</property>
	</bean>
	
	<bean id="excelSheetItemWriter" class="be.raildelays.batch.writer.ExcelSheetItemWriter" scope="step">
		<property name="input">
			<bean class="java.io.FileInputStream">
				<constructor-arg index="0" type="java.lang.String"
					value="#{jobParameters['excel.input.template']}" />
			</bean>
		</property>
		<property name="output">
			<bean class="java.io.FileOutputStream">
				<constructor-arg index="0" type="java.lang.String"
					value="#{jobParameters['excel.output.file']}" />
			</bean>
		</property>
	</bean>

</beans>
