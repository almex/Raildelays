<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!-- Needed if we use a AutomaticJobRegistrar -->
    <context:annotation-config/>

    <import resource="parent-job-context.xml"/>

    <!--<job id="mainJob" parent="parentJob" xmlns="http://www.springframework.org/schema/batch">
        <step id="step1" next="decision">

        </step>
        <decision id="decision" decider="maxMonthsDecider">
            <next on="COMPLETED_WITH_MAX_MONTHS" to="handleMaxMonthsStep"/>
            <end on="COMPLETED"/>
        </decision>
        <step id="handleMaxMonthsStep">
            <job ref="handleMaxMonthsJob" job-parameters-extractor="jobParameterExtractor"/>
        </step>
    </job>

    <bean id="jobParameterExtractor" class="org.springframework.batch.core.step.job.DefaultJobParametersExtractor" />-->

    <!--
        The goal of this job is :
        ________________________________________________________________________________________________________________

        /sncb_20140812.xls             /20150212/sncb_20140812.xls              /20150212/sncb_20140812.xls
        /sncb_20141016.xls    =(1)=>   /20150212/sncb_20141016.xls    =(2)=>    /20150212/sncb_20141016.xls
        /sncb_20150102.xls             /20150212/sncb_20150102.xls              /20150212/sncb_20150102.xls
                                       /sncb_20140812.xls                       /sncb_20150113.xls
                                       /sncb_20141016.xls
                                       /sncb_20150102.xls
                                       /sncb_20150113.xls
        ________________________________________________________________________________________________________________


        As an input of this job we should have :

            jobParameters['threshold.date'] = '20150212'

        The last file to archive should be the one to split.

        1) Split Excel files from the last date matching the end of 6 months period.

        ATTENTION: If there is one or more files containing dates after threshold, they all have to be re-written
        in order to shift all rows! Thus means we may have to create new files and to delete others.

        This pseudo code can only be implemented if and only if we can overwrite the file that we will read.
        In our case the ExcelSheetItemReader put all rows in memory during ItemStream#open() so this requirement is
        full-filed.

        for (ExcelSheet excelSheet : directory.getFiles()) {
            for (Row item : excelSheet.getRows()) {
                if (item >= threshold) {
                    newFile.write(item)
                } else {
                    currentFile.write(item)
                }
            }
        }

        2) Delete all files already archived. Meaning we can match file names between archive folder and target folder
        to know which one to delete.

        3) Send an e-mail with all Excel files containing delays for 6 months as attachment.
    -->
    <job id="handleMaxMonthsJob" parent="parentJob" xmlns="http://www.springframework.org/schema/batch">
        <step id="splitBeforeThreshold" next="splitAfterThreshold">
            <tasklet transaction-manager="batchTransactionManager">
                <chunk reader="allExcelFilesToSplitItemReader"
                       processor="splitBeforeExcelSheetProcessor"
                       writer="excelSheetBeforeItemWriter"
                       commit-interval="1">

                    <listeners merge="true">
                        <!-- To compute file name of the Excel file after filtering -->
                        <listener ref="resourceLocatorListener"/>
                    </listeners>
                </chunk>
            </tasklet>
        </step>
        <step id="splitAfterThreshold">
            <tasklet transaction-manager="batchTransactionManager">
                <chunk reader="allExcelFilesToSplitItemReader"
                       processor="splitAfterExcelSheetProcessor"
                       writer="excelSheetAfterItemWriter"
                       commit-interval="1">

                    <listeners merge="true">
                        <!-- To compute file name of the Excel file after filtering -->
                        <listener ref="resourceLocatorListener"/>
                    </listeners>
                </chunk>
            </tasklet>
        </step>
        <!--step id="deleteFiles" next="sendEmail">
            <tasklet transaction-manager="batchTransactionManager" ref="tasklet"/>
        </step-->
        <!--step id="sendEmail">
            <tasklet transaction-manager="batchTransactionManager" ref="tasklet"/>
        </step-->
    </job>


    <bean id="resourceLocatorListener"
          class="be.raildelays.batch.listener.ResourceLocatorListener"
          scope="step"/>

    <bean id="maxMonthsDecider" class="be.raildelays.batch.decider.MaxMonthsDecider">
        <property name="maxNumberOfMonth" value="${excel.max.months}"/>
        <property name="reader">
            <bean class="org.springframework.batch.item.file.MultiResourceItemReader"
                  scope="step">
                <property name="delegate" ref="allExcelFilesToSplitItemReader"/>
                <property name="resources" value="#{jobParameters['excel.input.path']}"/>
            </bean>
        </property>
    </bean>

    <!-- ================================================================================================== -->
    <!-- =====================================         READERS        ===================================== -->
    <!-- ================================================================================================== -->

    <bean id="allExcelFilesToSplitItemReader"
          class="org.springframework.batch.item.file.MultiResourceItemReader"
          scope="step">
        <property name="delegate">
            <bean class="org.springframework.batch.item.file.ExcelSheetItemReader">
                <property name="name" value="allExcelFilesToSplitItemReader"/>
                <property name="rowsToSkip" value="${excel.sheet0.rowstoskip}"/>
                <property name="maxItemCount" value="${excel.sheet0.maxitemcount}"/>
                <property name="rowMapper">
                    <bean class="be.raildelays.batch.reader.BatchExcelRowMapper">
                        <property name="language" value="#{jobParameters['language']}"/>
                    </bean>
                </property>
            </bean>
        </property>
        <property name="resources" value="#{jobParameters['excel.input.path']}"/>
    </bean>

    <!-- ================================================================================================== -->
    <!-- =====================================       PROCESSORS       ===================================== -->
    <!-- ================================================================================================== -->

    <bean id="splitBeforeExcelSheetProcessor" class="be.raildelays.batch.processor.SplitExcelSheetProcessor"
          scope="step">
        <property name="thresholdDate" value="#{jobParameters['threshold.date']}"/>
        <property name="mode">
            <util:constant static-field="be.raildelays.batch.processor.SplitExcelSheetProcessor.Mode.BEFORE"/>
        </property>
    </bean>

    <bean id="splitAfterExcelSheetProcessor" class="be.raildelays.batch.processor.SplitExcelSheetProcessor"
          scope="step">
        <property name="thresholdDate" value="#{jobParameters['threshold.date']}"/>
        <property name="mode">
            <util:constant static-field="be.raildelays.batch.processor.SplitExcelSheetProcessor.Mode.AFTER_OR_EQUALS"/>
        </property>
    </bean>

    <!-- ================================================================================================== -->
    <!-- =====================================         WRITERS        ===================================== -->
    <!-- ================================================================================================== -->

    <bean id="excelSheetBeforeItemWriter"
          class="org.springframework.batch.item.support.MultiResourceSupportItemWriter"
          scope="step">
        <property name="delegate">
            <bean class="org.springframework.batch.item.file.ExcelSheetItemWriter"
                  scope="step">
                <property name="rowAggregator">
                    <bean class="be.raildelays.batch.writer.BatchExcelRowAggregator"
                          scope="step">
                        <property name="language" value="#{jobParameters['language']}"/>
                    </bean>
                </property>
                <property name="useItemIndex" value="false"/>
                <property name="name" value="excelSheetBeforeItemWriter"/>
                <property name="shouldDeleteIfExists" value="true"/>
                <property name="rowsToSkip" value="${excel.sheet0.rowstoskip}"/>
                <property name="maxItemCount" value="${excel.sheet0.maxitemcount}"/>
                <property name="template" value="#{jobParameters['excel.input.template']}"/>
            </bean>
        </property>
        <property name="name" value="multiResourceForSplitItemWriter"/>
        <property name="resourceLocator">
            <bean class="be.raildelays.batch.support.ToWriteExcelResourceLocator"
                  scope="step">
                <property name="resource" value="#{jobParameters['excel.archive.path']}"/>
                <property name="resourceItemSearch" ref="resourceItemSearch"/>
                <property name="keyName" value="${excel.resource.key}"/>
            </bean>
        </property>
    </bean>

    <bean id="excelSheetAfterItemWriter"
          class="org.springframework.batch.item.support.MultiResourceSupportItemWriter"
          scope="step">
        <property name="delegate">
            <bean class="org.springframework.batch.item.file.ExcelSheetItemWriter"
                  scope="step">
                <property name="rowAggregator">
                    <bean class="be.raildelays.batch.writer.BatchExcelRowAggregator"
                          scope="step">
                        <property name="language" value="#{jobParameters['language']}"/>
                    </bean>
                </property>
                <property name="useItemIndex" value="false"/>
                <property name="name" value="excelSheetAfterItemWriter"/>
                <property name="shouldDeleteIfExists" value="true"/>
                <property name="rowsToSkip" value="${excel.sheet0.rowstoskip}"/>
                <property name="maxItemCount" value="${excel.sheet0.maxitemcount}"/>
                <property name="template" value="#{jobParameters['excel.input.template']}"/>
            </bean>
        </property>
        <property name="name" value="multiResourceForSplitItemWriter"/>
        <property name="resourceLocator">
            <bean class="be.raildelays.batch.support.ToWriteExcelResourceLocator"
                  scope="step">
                <property name="resource" value="#{jobParameters['excel.output.path']}"/>
                <property name="resourceItemSearch" ref="resourceItemSearch"/>
                <property name="keyName" value="${excel.resource.key}"/>
            </bean>
        </property>
    </bean>

    <bean id="resourceItemSearch"
          class="be.raildelays.batch.support.SimpleResourceItemSearch"
          scope="step">
        <property name="reader">
            <bean class="org.springframework.batch.item.file.ExcelSheetItemReader">
                <property name="name" value="excelSheetItemReader3"/>
                <property name="rowsToSkip" value="${excel.sheet0.rowstoskip}"/>
                <property name="maxItemCount" value="${excel.sheet0.maxitemcount}"/>
                <property name="rowMapper">
                    <bean class="be.raildelays.batch.reader.BatchExcelRowMapper">
                        <property name="language" value="#{jobParameters['language']}"/>
                    </bean>
                </property>
            </bean>
        </property>
        <property name="comparator">
            <bean class="be.raildelays.batch.bean.ExcelRowComparator"/>
        </property>
    </bean>

    <!-- ================================================================================================== -->
    <!-- =====================================         TASKLET        ===================================== -->
    <!-- ================================================================================================== -->


    <bean id="tasklet"
          class="be.raildelays.batch.tasklet.DeleteFileTasklet"
          scope="step">
        <property name="source" value="file:#{jobParameters['excel.output.path']}"/>
    </bean>

</beans>
