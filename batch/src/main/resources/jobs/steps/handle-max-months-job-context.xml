<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!-- Needed if we use a AutomaticJobRegistrar -->
    <context:annotation-config/>
    <!-- To make the embedded step to use scope="step" -->
    <bean class="org.springframework.batch.core.scope.StepScope"/>

    <import resource="classpath:/jobs/parent-job-context.xml"/>

    <!--
        The goal of this job is :
        ________________________________________________________________________________________________________________

        /sncb_20140812.xls             /20150212/sncb_20140812.xls              /20150212/sncb_20140812.xls
        /sncb_20141016.xls    =(1)=>   /20150212/sncb_20141016.xls    =(2)=>    /20150212/sncb_20141016.xls
        /sncb_20150102.xls             /20150212/sncb_20150102.xls              /20150212/sncb_20150102.xls
                                       /sncb_20140812.xls                       /sncb_20150113.xls
                                       /sncb_20141016.xls
                                       /sncb_20150102.xls
                                       /sncb_20150113.xls
        ________________________________________________________________________________________________________________


        As an input of this job we should have :

            jobParameters['threshold.date'] = '20150212'

        The last file to archive should be the one to split.

        1) Split Excel files from the last date matching the end of 6 months period.

        ATTENTION: If there is one or more files containing dates after threshold, they all have to be re-written
        in order to shift all rows! Thus means we may have to create new files and to delete others.

        This pseudo code can only be implemented if and only if we can overwrite the file that we will read.
        In our case the ExcelSheetItemReader put all rows in memory during ItemStream#open() so this requirement is
        full-filed.

        for (ExcelSheet excelSheet : directory.getFiles()) {
            for (Row item : excelSheet.getRows()) {
                if (item >= threshold) {
                    newFile.write(item)
                } else {
                    currentFile.write(item)
                }
            }
        }

        2) Delete all files already archived. Meaning we can match file names between archive folder and target folder
        to know which one to delete.

        3) Send an e-mail with all Excel files containing delays for 6 months as attachment.
    -->
    <job id="handleMaxMonthsJob" parent="parentJob" xmlns="http://www.springframework.org/schema/batch">
        <step id="splitBeforeThreshold" next="splitAfterThreshold">
            <tasklet transaction-manager="batchTransactionManager">
                <chunk reader="allExcelFilesToSplitItemReader"
                       processor="splitBeforeExcelSheetProcessor"
                       writer="excelSheetBeforeItemWriter"
                       commit-interval="1">
                </chunk>
            </tasklet>
        </step>
        <step id="splitAfterThreshold" next="deleteFiles">
            <tasklet transaction-manager="batchTransactionManager">
                <chunk reader="allExcelFilesToSplitItemReader"
                       processor="splitAfterExcelSheetProcessor"
                       writer="excelSheetAfterItemWriter"
                       commit-interval="1">
                </chunk>
            </tasklet>
        </step>
        <step id="deleteFiles" next="sendEmail">
            <tasklet transaction-manager="batchTransactionManager" ref="deleteDuplicatedFiles"/>
        </step>
        <step id="sendEmail">
            <tasklet transaction-manager="batchTransactionManager" ref="sendExcelFilesByEmail"/>
        </step>
        <validator ref="handleMaxMonthsJobParametersValidator"/>
    </job>


    <bean id="handleMaxMonthsJobParametersValidator"
          class="org.springframework.batch.core.job.DefaultJobParametersValidator">
        <property name="requiredKeys">
            <list>
                <value>excel.output.path</value>
                <value>excel.file.name</value>
                <value>excel.file.extension</value>
                <value>excel.template.path</value>
                <value>excel.archive.path</value>
                <value>language</value>
                <value>mail.account.username</value>
                <value>mail.account.password</value>
                <value>mail.server.host</value>
                <value>mail.server.port</value>
                <value>mail.account.address</value>
                <value>threshold.date</value>
            </list>
        </property>
    </bean>

    <!-- ================================================================================================== -->
    <!-- =====================================         DECIDERS       ===================================== -->
    <!-- ================================================================================================== -->


    <bean id="maxMonthsDecider"
          class="be.raildelays.batch.decider.MaxMonthsDecider"
          scope="step">
        <property name="maxNumberOfMonth" value="${excel.max.months}"/>
        <property name="reader" ref="allExcelFilesToSplitItemReader"/>
    </bean>

    <!-- ================================================================================================== -->
    <!-- =====================================         READERS        ===================================== -->
    <!-- ================================================================================================== -->

    <bean id="allExcelFilesToSplitItemReader"
          class="org.springframework.batch.item.file.MultiResourceItemReader"
          scope="step">
        <property name="delegate">
            <bean class="org.springframework.batch.item.file.ExcelSheetItemReader"
                  scope="step">
                <property name="name" value="allExcelFilesToSplitItemReader"/>
                <property name="rowsToSkip" value="${excel.sheet0.rowstoskip}"/>
                <property name="maxItemCount" value="${excel.sheet0.maxitemcount}"/>
                <property name="rowMapper">
                    <bean class="be.raildelays.batch.reader.BatchExcelRowMapper">
                        <property name="language" value="#{jobParameters['language']}"/>
                    </bean>
                </property>
            </bean>
        </property>
        <property name="resources"
                  value="file:#{jobParameters['excel.output.path']}/*.#{jobParameters['excel.file.extension']}"/>
    </bean>

    <!-- ================================================================================================== -->
    <!-- =====================================       PROCESSORS       ===================================== -->
    <!-- ================================================================================================== -->

    <bean id="splitBeforeExcelSheetProcessor"
          class="be.raildelays.batch.processor.FilterWithThresholdDateProcessor"
          scope="step">
        <property name="thresholdDate" value="#{jobParameters['threshold.date']}"/>
        <property name="mode">
            <util:constant static-field="be.raildelays.batch.processor.FilterWithThresholdDateProcessor.Mode.BEFORE"/>
        </property>
    </bean>

    <bean id="splitAfterExcelSheetProcessor"
          class="be.raildelays.batch.processor.FilterWithThresholdDateProcessor"
          scope="step">
        <property name="thresholdDate" value="#{jobParameters['threshold.date']}"/>
        <property name="mode">
            <util:constant
                    static-field="be.raildelays.batch.processor.FilterWithThresholdDateProcessor.Mode.AFTER_OR_EQUALS"/>
        </property>
    </bean>

    <!-- ================================================================================================== -->
    <!-- =====================================         WRITERS        ===================================== -->
    <!-- ================================================================================================== -->

    <bean id="excelSheetBeforeItemWriter"
          class="org.springframework.batch.item.resource.ResourceLocatorItemWriterItemStream"
          scope="step">
        <property name="delegate">
            <bean class="org.springframework.batch.item.file.ExcelSheetItemWriter"
                  scope="step">
                <property name="rowAggregator">
                    <bean class="be.raildelays.batch.writer.ExcelRowAggregator"
                          scope="step">
                        <property name="language" value="#{jobParameters['language']}"/>
                    </bean>
                </property>
                <property name="useItemIndex" value="false"/>
                <property name="name" value="excelSheetBeforeItemWriter"/>
                <property name="shouldDeleteIfExists" value="false"/>
                <property name="rowsToSkip" value="${excel.sheet0.rowstoskip}"/>
                <property name="maxItemCount" value="${excel.sheet0.maxitemcount}"/>
                <property name="template" value="file:#{jobParameters['excel.template.path']}"/>
            </bean>
        </property>
        <property name="name" value="excelSheetBeforeItemWriter"/>
        <property name="resourceLocator">
            <bean class="be.raildelays.batch.writer.MultiExcelFileToWriteLocator"
                  scope="step">
                <property name="filePrefix" value="#{jobParameters['excel.file.name']}"/>
                <property name="fileExtension" value=".#{jobParameters['excel.file.extension']}"/>
                <property name="directory"
                          value="file:#{jobParameters['excel.archive.path']}/#{T(java.time.LocalDate).now().toString()}/"/>
                <property name="maxItemCount" value="${excel.sheet0.maxitemcount}"/>
                <property name="resourceItemSearch" ref="resourceItemSearch"/>
            </bean>
        </property>
    </bean>

    <bean id="excelSheetAfterItemWriter"
          class="org.springframework.batch.item.resource.ResourceLocatorItemWriterItemStream"
          scope="step">
        <property name="delegate">
            <bean class="org.springframework.batch.item.file.ExcelSheetItemWriter"
                  scope="step">
                <property name="rowAggregator">
                    <bean class="be.raildelays.batch.writer.ExcelRowAggregator"
                          scope="step">
                        <property name="language" value="#{jobParameters['language']}"/>
                    </bean>
                </property>
                <property name="useItemIndex" value="false"/>
                <property name="name" value="excelSheetAfterItemWriter"/>
                <property name="shouldDeleteIfExists" value="true"/>
                <property name="rowsToSkip" value="${excel.sheet0.rowstoskip}"/>
                <property name="maxItemCount" value="${excel.sheet0.maxitemcount}"/>
                <property name="template" value="file:#{jobParameters['excel.template.path']}"/>
            </bean>
        </property>
        <property name="name" value="excelSheetAfterItemWriter"/>
        <property name="resourceLocator">
            <bean class="be.raildelays.batch.writer.MultiExcelFileToWriteLocator"
                  scope="step">
                <property name="filePrefix" value="#{jobParameters['excel.file.name']}"/>
                <property name="fileExtension" value=".#{jobParameters['excel.file.extension']}"/>
                <property name="directory" value="file:#{jobParameters['excel.output.path']}"/>
                <property name="maxItemCount" value="${excel.sheet0.maxitemcount}"/>
                <property name="forceNewFile" value="true"/>
                <property name="resourceItemSearch" ref="resourceItemSearch"/>
            </bean>
        </property>
    </bean>

    <bean id="resourceItemSearch"
          class="be.raildelays.batch.support.SimpleResourceItemSearch"
          scope="step">
        <property name="reader">
            <bean class="org.springframework.batch.item.file.ExcelSheetItemReader">
                <property name="name" value="excelSheetItemReader3"/>
                <property name="rowsToSkip" value="${excel.sheet0.rowstoskip}"/>
                <property name="maxItemCount" value="${excel.sheet0.maxitemcount}"/>
                <property name="rowMapper">
                    <bean class="be.raildelays.batch.reader.BatchExcelRowMapper">
                        <property name="language" value="#{jobParameters['language']}"/>
                    </bean>
                </property>
            </bean>
        </property>
        <property name="comparator">
            <bean class="be.raildelays.batch.bean.ExcelRowComparator"/>
        </property>
    </bean>

    <bean id="emailWriter"
          class="org.springframework.batch.item.mail.SimpleMailMessageItemWriter"
          scope="step">
        <property name="mailSender">
            <bean class="org.springframework.mail.javamail.JavaMailSenderImpl">
                <property name="host" value="#{jobParameters['mail.server.host']}"/>
                <property name="port" value="#{jobParameters['mail.server.port']}"/>
                <property name="password" value="#{jobParameters['mail.account.password']}"/>
                <property name="username" value="#{jobParameters['mail.account.username']}"/>
            </bean>
        </property>
        <property name="mailErrorHandler">
            <bean class="org.springframework.batch.item.mail.DefaultMailErrorHandler"/>
        </property>
    </bean>

    <!-- ================================================================================================== -->
    <!-- =====================================         TASKLET        ===================================== -->
    <!-- ================================================================================================== -->


    <bean id="deleteDuplicatedFiles"
          class="be.raildelays.batch.tasklet.DeleteFileTasklet"
          scope="step">
        <property name="resources">
            <bean class="be.raildelays.batch.support.ToDeleteExcelResourcesLocator" factory-method="getResources">
                <constructor-arg value="file:#{jobParameters['excel.output.path']}"/>
                <constructor-arg
                        value="file:#{jobParameters['excel.archive.path']}/#{T(java.time.LocalDate).now().toString()}/"/>
            </bean>
        </property>
    </bean>

    <bean id="sendExcelFilesByEmail"
          class="be.raildelays.batch.tasklet.SendResourcesByEmailTasklet"
          scope="step">
        <property name="resources"
                  value="file:#{jobParameters['excel.archive.path']}/#{T(java.time.LocalDate).now().toString()}/*.#{jobParameters['excel.file.extension']}"/>
        <property name="mailSender">
            <bean class="org.springframework.mail.javamail.JavaMailSenderImpl">
                <property name="host" value="#{jobParameters['mail.server.host']}"/>
                <property name="port" value="#{jobParameters['mail.server.port']}"/>
                <property name="password" value="#{jobParameters['mail.account.password']}"/>
                <property name="username" value="#{jobParameters['mail.account.username']}"/>
            </bean>
        </property>
        <property name="from" value="#{jobParameters['mail.account.address']}"/>
        <property name="to" value="#{jobParameters['mail.account.address']}"/>
        <property name="subject" value="${email.max.months.subject}"/>
    </bean>


</beans>
